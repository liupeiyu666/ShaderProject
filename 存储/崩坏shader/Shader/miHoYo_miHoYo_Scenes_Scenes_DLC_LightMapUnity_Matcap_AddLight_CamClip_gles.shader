//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Scenes/Scenes_DLC/LightMapUnity_Matcap_AddLight_CamClip" {
Properties {
[MHYHeaderBox(OPTIONS)] [Enum(UnityEngine.Rendering.CullMode)] _CullMode ("Cull Mode", Float) = 2
[Toggle(_ALPHATEST_ON)] _EnableAlphaCutoff ("Enable Alpha Cutoff", Float) = 0
[MHYKeywordFilter(_ALPHATEST_ON On)] _AlphaCutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
[MHYHeaderBox(MAPS)] [MHYSingleLineTextureNoScaleOffset(_Color)] _MainTex ("Albedo", 2D) = "white" { }
_Color ("Color", Color) = (1,1,1,1)
[MHYTextureScaleOffset] _MainMaps_ST ("Main Maps ST", Vector) = (1,1,0,0)
[MHYSingleLineTextureNoScaleOffset] _PropertyLightmapTex ("LightMap", 2D) = "gray" { }
[MHYTextureScaleOffset] _PropertyLightmapTexTS ("PropertyLightmapTexTS", Vector) = (0,0,0,0)
_ShadowColor ("Shadow Color", Color) = (0.5,0.5,0.5,1)
_ShadowIntegration ("Shadow Integration", Range(0, 1)) = 0.2
[MHYHeaderBox(LIGHTING)] _BloomIntensity ("Bloom Intensity", Range(0, 50)) = 1
_LightMapIntensity ("Light Map Intensity", Range(0, 5)) = 1.5
_FogTune ("Fog Tune", Range(0, 1)) = 1
_LightingColor ("Lighting Color", Color) = (0.2,0.2,0.2,1)
[MHYHeaderBox(MATCAP)] _MatcapMaskMap ("MatcapMask Map", 2D) = "white" { }
_BumpMap ("Normal Map", 2D) = "bump" { }
_MatCap ("MatCap (RGB)", 2D) = "white" { }
_MetalRef ("MetalRef", Range(0, 1)) = 0
[MHYHeaderBox(LIGHTMAP)] [Toggle(_LIGHTMAPCOLOR_ON)] _EnableLightmapColor ("Enable LightmapColor Change", Float) = 0
_LightmapColorScale ("LightmapColorScale", Range(0, 4)) = 1.85
_LightmapColorIns ("LightmapColorIns", Range(0, 2)) = 0.9
_LightmapColorChange ("LightmapColorChange (RGB)", 2D) = "white" { }
_LightmapColorLerp ("LightmapColorLerp", Range(0, 1)) = 1
[MHYHeaderBox(ADDLIGHT)] _AdditiveLightPower ("Additive Light Power", Range(0.1, 5)) = 1
_AdditiveLightIntensity ("Additive Light Intensity", Range(0, 1)) = 1
[MHYHeaderBox(CAMCLIP)] _FadeDistance ("Fade Start Distance", Range(0.1, 10)) = 0.5
_FadeOffset ("Fade Start Offset", Range(0, 10)) = 1
}
SubShader {
 LOD 600
 Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARDONLY"
  LOD 600
  Tags { "DrawDepth" = "FrontFace" "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
  Cull Off
  GpuProgramID 17563
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
}
}
 Pass {
  Name "CONSTANT_REPLACE"
  LOD 600
  Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
  GpuProgramID 106076
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Common/AddLight/ADDLIGHT"
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
SubShader {
 LOD 200
 Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARDONLY"
  LOD 200
  Tags { "DrawDepth" = "FrontFace" "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
  Cull Off
  GpuProgramID 187022
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_15;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_16;
    mediump float tmpvar_17;
    tmpvar_17 = dot (tmpvar_15, vec3(0.299, 0.587, 0.114));
    gray_16 = tmpvar_17;
    highp vec2 tmpvar_18;
    tmpvar_18.y = 0.5;
    tmpvar_18.x = (gray_16 * _LightmapColorScale);
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_LightmapColorChange, tmpvar_18);
    fc_9 = mix (((tmpvar_19 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_15, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_26;
  highp mat3 tmpvar_27;
  tmpvar_27[0] = unity_MatrixV[0].xyz;
  tmpvar_27[1] = unity_MatrixV[1].xyz;
  tmpvar_27[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_27 * worldNorm_5);
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 - (2.0 * (
    dot (worldNorm_5, tmpvar_28)
   * worldNorm_5)));
  R_4 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = ((tmpvar_30.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_MatCap, tmpvar_31);
  mc_3 = tmpvar_32;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_20 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_33;
  mediump vec3 srcColor_34;
  srcColor_34 = colorBlendLightMap_8;
  tmpvar_33 = (xlv_COLOR1.xyz + (srcColor_34 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_33;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_35;
  tmpvar_35.xyz = colorBlendLightMap_8;
  tmpvar_35.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_14;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_15;
    mediump float tmpvar_16;
    tmpvar_16 = dot (tmpvar_14, vec3(0.299, 0.587, 0.114));
    gray_15 = tmpvar_16;
    highp vec2 tmpvar_17;
    tmpvar_17.y = 0.5;
    tmpvar_17.x = (gray_15 * _LightmapColorScale);
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_LightmapColorChange, tmpvar_17);
    fc_9 = mix (((tmpvar_18 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_14, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_20;
  tmpvar_20 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = unity_MatrixV[0].xyz;
  tmpvar_26[1] = unity_MatrixV[1].xyz;
  tmpvar_26[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_26 * worldNorm_5);
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_27 - (2.0 * (
    dot (worldNorm_5, tmpvar_27)
   * worldNorm_5)));
  R_4 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = ((tmpvar_29.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (_MatCap, tmpvar_30);
  mc_3 = tmpvar_31;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_19 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_32;
  mediump vec3 srcColor_33;
  srcColor_33 = colorBlendLightMap_8;
  tmpvar_32 = (xlv_COLOR1.xyz + (srcColor_33 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_32;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_34;
  tmpvar_34.xyz = colorBlendLightMap_8;
  tmpvar_34.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_16;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_17;
    mediump float tmpvar_18;
    tmpvar_18 = dot (tmpvar_16, vec3(0.299, 0.587, 0.114));
    gray_17 = tmpvar_18;
    highp vec2 tmpvar_19;
    tmpvar_19.y = 0.5;
    tmpvar_19.x = (gray_17 * _LightmapColorScale);
    lowp vec4 tmpvar_20;
    tmpvar_20 = texture2D (_LightmapColorChange, tmpvar_19);
    fc_9 = mix (((tmpvar_20 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_16, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (fc_9 * _LightMapIntensity);
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_27;
  highp mat3 tmpvar_28;
  tmpvar_28[0] = unity_MatrixV[0].xyz;
  tmpvar_28[1] = unity_MatrixV[1].xyz;
  tmpvar_28[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_28 * worldNorm_5);
  highp vec3 tmpvar_29;
  tmpvar_29 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 - (2.0 * (
    dot (worldNorm_5, tmpvar_29)
   * worldNorm_5)));
  R_4 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = ((tmpvar_31.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_MatCap, tmpvar_32);
  mc_3 = tmpvar_33;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_21 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_34;
  mediump vec3 srcColor_35;
  srcColor_35 = colorBlendLightMap_8;
  tmpvar_34 = (xlv_COLOR1.xyz + (srcColor_35 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_34;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_36;
  tmpvar_36.xyz = colorBlendLightMap_8;
  tmpvar_36.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_12.w;
  lowp vec4 color_13;
  color_13 = tmpvar_12;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_13.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_14;
  highp vec2 screenCoord_15;
  screenCoord_15 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_16;
  shadow_16 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_17;
    tmpvar_17 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_15);
    shadow_16 = tmpvar_17.x;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_18;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_19;
    mediump float tmpvar_20;
    tmpvar_20 = dot (tmpvar_18, vec3(0.299, 0.587, 0.114));
    gray_19 = tmpvar_20;
    highp vec2 tmpvar_21;
    tmpvar_21.y = 0.5;
    tmpvar_21.x = (gray_19 * _LightmapColorScale);
    lowp vec4 tmpvar_22;
    tmpvar_22 = texture2D (_LightmapColorChange, tmpvar_21);
    fc_9 = mix (((tmpvar_22 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_18, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_16))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_29;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = unity_MatrixV[0].xyz;
  tmpvar_30[1] = unity_MatrixV[1].xyz;
  tmpvar_30[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_30 * worldNorm_5);
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_31 - (2.0 * (
    dot (worldNorm_5, tmpvar_31)
   * worldNorm_5)));
  R_4 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = ((tmpvar_33.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MatCap, tmpvar_34);
  mc_3 = tmpvar_35;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_23 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_36;
  mediump vec3 srcColor_37;
  srcColor_37 = colorBlendLightMap_8;
  tmpvar_36 = (xlv_COLOR1.xyz + (srcColor_37 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_36;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_38;
  tmpvar_38.xyz = colorBlendLightMap_8;
  tmpvar_38.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_MatrixV;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_13;
  highp vec2 screenCoord_14;
  screenCoord_14 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_15;
  shadow_15 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_16;
    tmpvar_16 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_14);
    shadow_15 = tmpvar_16.x;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_17;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_18;
    mediump float tmpvar_19;
    tmpvar_19 = dot (tmpvar_17, vec3(0.299, 0.587, 0.114));
    gray_18 = tmpvar_19;
    highp vec2 tmpvar_20;
    tmpvar_20.y = 0.5;
    tmpvar_20.x = (gray_18 * _LightmapColorScale);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_LightmapColorChange, tmpvar_20);
    fc_9 = mix (((tmpvar_21 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_17, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_22;
  tmpvar_22 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_15))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_28;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = unity_MatrixV[0].xyz;
  tmpvar_29[1] = unity_MatrixV[1].xyz;
  tmpvar_29[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_29 * worldNorm_5);
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_31;
  tmpvar_31 = (tmpvar_30 - (2.0 * (
    dot (worldNorm_5, tmpvar_30)
   * worldNorm_5)));
  R_4 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = ((tmpvar_32.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MatCap, tmpvar_33);
  mc_3 = tmpvar_34;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_22 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_35;
  mediump vec3 srcColor_36;
  srcColor_36 = colorBlendLightMap_8;
  tmpvar_35 = (xlv_COLOR1.xyz + (srcColor_36 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_35;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_37;
  tmpvar_37.xyz = colorBlendLightMap_8;
  tmpvar_37.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 unity_LightmapST;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform mediump sampler2D unity_Lightmap;
uniform mediump vec4 unity_Lightmap_HDR;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_Lightmap, xlv_TEXCOORD0.zw);
  lmtex_11.w = tmpvar_14.w;
  lowp vec4 color_15;
  color_15 = tmpvar_14;
  lmtex_11.xyz = (unity_Lightmap_HDR.x * color_15.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_16;
  highp vec2 screenCoord_17;
  screenCoord_17 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_18;
  shadow_18 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_19;
    tmpvar_19 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_17);
    shadow_18 = tmpvar_19.x;
  };
  mediump vec3 tmpvar_20;
  tmpvar_20 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_20;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_21;
    mediump float tmpvar_22;
    tmpvar_22 = dot (tmpvar_20, vec3(0.299, 0.587, 0.114));
    gray_21 = tmpvar_22;
    highp vec2 tmpvar_23;
    tmpvar_23.y = 0.5;
    tmpvar_23.x = (gray_21 * _LightmapColorScale);
    lowp vec4 tmpvar_24;
    tmpvar_24 = texture2D (_LightmapColorChange, tmpvar_23);
    fc_9 = mix (((tmpvar_24 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_20, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_18))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_26;
  tmpvar_26 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_31;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_MatrixV[0].xyz;
  tmpvar_32[1] = unity_MatrixV[1].xyz;
  tmpvar_32[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_32 * worldNorm_5);
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_34;
  tmpvar_34 = (tmpvar_33 - (2.0 * (
    dot (worldNorm_5, tmpvar_33)
   * worldNorm_5)));
  R_4 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = ((tmpvar_35.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_MatCap, tmpvar_36);
  mc_3 = tmpvar_37;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_25 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_38;
  mediump vec3 srcColor_39;
  srcColor_39 = colorBlendLightMap_8;
  tmpvar_38 = (xlv_COLOR1.xyz + (srcColor_39 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_38;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_40;
  tmpvar_40.xyz = colorBlendLightMap_8;
  tmpvar_40.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_40;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec3 worldBinormal_2;
  mediump vec3 worldTangent_3;
  mediump vec3 worldNormal_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_5.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_5.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_4 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_2 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_3.x;
  tmpvar_19.y = worldBinormal_2.x;
  tmpvar_19.z = worldNormal_4.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_3.y;
  tmpvar_20.y = worldBinormal_2.y;
  tmpvar_20.z = worldNormal_4.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_3.z;
  tmpvar_21.y = worldBinormal_2.z;
  tmpvar_21.z = worldNormal_4.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase.xyz + (h_31 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_33 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  tmpvar_23 = tmpvar_25;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainMaps_ST;
uniform highp vec4 _PropertyLightmapTexTS;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec3 worldBinormal_1;
  mediump vec3 worldTangent_2;
  mediump vec3 worldNormal_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4.xy = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  tmpvar_4.zw = ((_glesMultiTexCoord1.xy * _PropertyLightmapTexTS.xy) + _PropertyLightmapTexTS.zw);
  tmpvar_5 = _glesColor;
  highp vec4 o_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_7.zw;
  highp vec4 tmpvar_12;
  tmpvar_12 = (unity_ObjectToWorld * _glesVertex);
  highp mat3 tmpvar_13;
  tmpvar_13[0] = unity_WorldToObject[0].xyz;
  tmpvar_13[1] = unity_WorldToObject[1].xyz;
  tmpvar_13[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_glesNormal * tmpvar_13));
  worldNormal_3 = tmpvar_14;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_15[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_15[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_15 * _glesTANGENT.xyz));
  worldTangent_2 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = ((worldNormal_3.yzx * worldTangent_2.zxy) - (worldNormal_3.zxy * worldTangent_2.yzx));
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17 * _glesTANGENT.w);
  worldBinormal_1 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.x = worldTangent_2.x;
  tmpvar_19.y = worldBinormal_1.x;
  tmpvar_19.z = worldNormal_3.x;
  tmpvar_6.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.x = worldTangent_2.y;
  tmpvar_20.y = worldBinormal_1.y;
  tmpvar_20.z = worldNormal_3.y;
  mediump vec3 tmpvar_21;
  tmpvar_21.x = worldTangent_2.z;
  tmpvar_21.y = worldBinormal_1.z;
  tmpvar_21.z = worldNormal_3.z;
  highp float tmpvar_22;
  tmpvar_22 = clamp (((
    (-(((unity_MatrixV * unity_ObjectToWorld) * _glesVertex).z) - _ProjectionParams.y)
   - _FadeOffset) / _FadeDistance), 0.0, 1.0);
  tmpvar_6.w = tmpvar_22;
  mediump vec4 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_25;
  mediump float fogFactor_26;
  mediump vec3 fogColor_27;
  mediump vec3 heightFogColor_28;
  highp float HeightFogFactor_29;
  mediump vec3 atomesphereFogColor_30;
  mediump float h_31;
  highp float linearFogDensity_32;
  mediump float len_33;
  highp float tmpvar_34;
  tmpvar_34 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_33 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((len_33 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_32 = (tmpvar_35 * (2.0 - tmpvar_35));
  if ((len_33 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_32 = (linearFogDensity_32 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_36;
  tmpvar_36 = min (pow (linearFogDensity_32, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_32 = tmpvar_36;
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((tmpvar_12.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  h_31 = (tmpvar_37 * (2.0 - tmpvar_37));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_HeigtFogColBase2.xyz + (h_31 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_30 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (atomesphereFogColor_30, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_33 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_30 = tmpvar_40;
  mediump float tmpvar_41;
  mediump float r_42;
  mediump float f_43;
  mediump float u_44;
  mediump float l_45;
  mediump float fogInt_46;
  fogInt_46 = 1.0;
  highp float tmpvar_47;
  tmpvar_47 = (_HeigtFogParams2.x * tmpvar_24.y);
  highp float tmpvar_48;
  tmpvar_48 = abs(tmpvar_47);
  if ((tmpvar_48 > 0.01)) {
    highp float tmpvar_49;
    tmpvar_49 = exp(-(tmpvar_47));
    fogInt_46 = ((1.0 - tmpvar_49) / tmpvar_47);
  };
  highp float tmpvar_50;
  tmpvar_50 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_45 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (l_45 * _HeigtFogParams2.y);
  u_44 = tmpvar_51;
  fogInt_46 = (fogInt_46 * u_44);
  mediump float tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = clamp (((l_45 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_52 = tmpvar_53;
  r_42 = (tmpvar_52 * (2.0 - tmpvar_52));
  r_42 = ((r_42 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_43 = ((1.0 - clamp (
    exp2(-(fogInt_46))
  , 0.0, 1.0)) * r_42);
  highp float tmpvar_54;
  tmpvar_54 = min (f_43, _HeigtFogColBase2.w);
  tmpvar_41 = tmpvar_54;
  HeightFogFactor_29 = tmpvar_41;
  highp vec3 tmpvar_55;
  tmpvar_55 = _Mihoyo_FogColor2.xyz;
  heightFogColor_28 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = ((heightFogColor_28 * HeightFogFactor_29) + ((atomesphereFogColor_30 * tmpvar_36) * (1.0 - HeightFogFactor_29)));
  fogColor_27 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = ((1.0 - tmpvar_36) * (1.0 - HeightFogFactor_29));
  fogFactor_26 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58.xyz = fogColor_27;
  tmpvar_58.w = fogFactor_26;
  tmpvar_25 = tmpvar_58;
  highp vec4 tmpvar_59;
  mediump float fogFactor_60;
  mediump vec3 fogColor_61;
  mediump vec3 heightFogColor_62;
  highp float HeightFogFactor_63;
  mediump vec3 atomesphereFogColor_64;
  mediump float h_65;
  highp float linearFogDensity_66;
  mediump float len_67;
  highp float tmpvar_68;
  tmpvar_68 = sqrt(dot (tmpvar_24, tmpvar_24));
  len_67 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((len_67 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_66 = (tmpvar_69 * (2.0 - tmpvar_69));
  if ((len_67 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_66 = (linearFogDensity_66 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_70;
  tmpvar_70 = min (pow (linearFogDensity_66, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_66 = tmpvar_70;
  mediump float tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((tmpvar_12.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  h_65 = (tmpvar_71 * (2.0 - tmpvar_71));
  highp vec3 tmpvar_73;
  tmpvar_73 = (_HeigtFogColBase3.xyz + (h_65 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_64 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = mix (atomesphereFogColor_64, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_67 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_64 = tmpvar_74;
  mediump float tmpvar_75;
  mediump float r_76;
  mediump float f_77;
  mediump float u_78;
  mediump float l_79;
  mediump float fogInt_80;
  fogInt_80 = 1.0;
  highp float tmpvar_81;
  tmpvar_81 = (_HeigtFogParams3.x * tmpvar_24.y);
  highp float tmpvar_82;
  tmpvar_82 = abs(tmpvar_81);
  if ((tmpvar_82 > 0.01)) {
    highp float tmpvar_83;
    tmpvar_83 = exp(-(tmpvar_81));
    fogInt_80 = ((1.0 - tmpvar_83) / tmpvar_81);
  };
  highp float tmpvar_84;
  tmpvar_84 = sqrt(dot (tmpvar_24, tmpvar_24));
  l_79 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = (l_79 * _HeigtFogParams3.y);
  u_78 = tmpvar_85;
  fogInt_80 = (fogInt_80 * u_78);
  mediump float tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (((l_79 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_86 = tmpvar_87;
  r_76 = (tmpvar_86 * (2.0 - tmpvar_86));
  r_76 = ((r_76 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_77 = ((1.0 - clamp (
    exp2(-(fogInt_80))
  , 0.0, 1.0)) * r_76);
  highp float tmpvar_88;
  tmpvar_88 = min (f_77, _HeigtFogColBase3.w);
  tmpvar_75 = tmpvar_88;
  HeightFogFactor_63 = tmpvar_75;
  highp vec3 tmpvar_89;
  tmpvar_89 = _Mihoyo_FogColor3.xyz;
  heightFogColor_62 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = ((heightFogColor_62 * HeightFogFactor_63) + ((atomesphereFogColor_64 * tmpvar_70) * (1.0 - HeightFogFactor_63)));
  fogColor_61 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = ((1.0 - tmpvar_70) * (1.0 - HeightFogFactor_63));
  fogFactor_60 = tmpvar_91;
  mediump vec4 tmpvar_92;
  tmpvar_92.xyz = fogColor_61;
  tmpvar_92.w = fogFactor_60;
  tmpvar_59 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (tmpvar_25, tmpvar_59, vec4(_LerpFactor));
  tmpvar_23 = tmpvar_93;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_20;
  xlv_TEXCOORD6 = tmpvar_21;
  xlv_COLOR1 = tmpvar_23;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixV;
uniform sampler2D _DitherMaskLOD2D;
uniform highp float _ReceiveDynamicShadow;
uniform sampler2D _DynamicSceneShadowVolumeBuffer;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform sampler2D _PropertyLightmapTex;
uniform mediump vec3 _ShadowColor;
uniform mediump float _LightMapIntensity;
uniform mediump float _ShadowIntegration;
uniform mediump vec3 _LightingColor;
uniform mediump float _EnableLightmapColor;
uniform mediump float _LightmapColorScale;
uniform mediump float _LightmapColorIns;
uniform mediump float _LightmapColorLerp;
uniform sampler2D _MatcapMaskMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MatCap;
uniform sampler2D _LightmapColorChange;
uniform mediump float _MetalRef;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_COLOR1;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD4;
  highp vec4 mc_3;
  mediump vec3 R_4;
  highp vec3 worldNorm_5;
  mediump vec4 MatcapMask_Color_6;
  mediump vec3 normals_7;
  highp vec3 colorBlendLightMap_8;
  mediump vec3 fc_9;
  mediump vec4 tex_C_Color_10;
  mediump vec4 lmtex_11;
  highp vec2 vpos_12;
  vpos_12 = (((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy) / 4.0);
  vpos_12.y = ((fract(vpos_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, vpos_12).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_PropertyLightmapTex, xlv_TEXCOORD0.zw);
  lmtex_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  tex_C_Color_10 = tmpvar_15;
  highp vec2 screenCoord_16;
  screenCoord_16 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w);
  mediump float shadow_17;
  shadow_17 = 1.0;
  if ((_ReceiveDynamicShadow > 0.5)) {
    lowp vec4 tmpvar_18;
    tmpvar_18 = texture2D (_DynamicSceneShadowVolumeBuffer, screenCoord_16);
    shadow_17 = tmpvar_18.x;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (lmtex_11.xyz * _ShadowColor);
  fc_9 = tmpvar_19;
  if ((_EnableLightmapColor > 0.0)) {
    highp float gray_20;
    mediump float tmpvar_21;
    tmpvar_21 = dot (tmpvar_19, vec3(0.299, 0.587, 0.114));
    gray_20 = tmpvar_21;
    highp vec2 tmpvar_22;
    tmpvar_22.y = 0.5;
    tmpvar_22.x = (gray_20 * _LightmapColorScale);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture2D (_LightmapColorChange, tmpvar_22);
    fc_9 = mix (((tmpvar_23 * _LightmapColorIns).xyz * _ShadowColor), tmpvar_19, vec3(_LightmapColorLerp));
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((fc_9 * (1.0 - 
    (clamp ((lmtex_11.x - _ShadowIntegration), 0.0, 1.0) * (1.0 - shadow_17))
  )) * _LightMapIntensity);
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((tex_C_Color_10.xyz * _Color.xyz) * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((texture2D (_BumpMap, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0);
  normals_7 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MatcapMaskMap, xlv_TEXCOORD0.xy);
  MatcapMask_Color_6 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = dot (xlv_TEXCOORD4.xyz, normals_7);
  worldNorm_5.x = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = dot (xlv_TEXCOORD5, normals_7);
  worldNorm_5.y = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (xlv_TEXCOORD6, normals_7);
  worldNorm_5.z = tmpvar_30;
  highp mat3 tmpvar_31;
  tmpvar_31[0] = unity_MatrixV[0].xyz;
  tmpvar_31[1] = unity_MatrixV[1].xyz;
  tmpvar_31[2] = unity_MatrixV[2].xyz;
  worldNorm_5 = (tmpvar_31 * worldNorm_5);
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize((xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos));
  highp vec3 tmpvar_33;
  tmpvar_33 = (tmpvar_32 - (2.0 * (
    dot (worldNorm_5, tmpvar_32)
   * worldNorm_5)));
  R_4 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (worldNorm_5, R_4, vec3(_MetalRef));
  worldNorm_5 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = ((tmpvar_34.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MatCap, tmpvar_35);
  mc_3 = tmpvar_36;
  mc_3 = ((mc_3 * tex_C_Color_10) * (vec4(2.0, 2.0, 2.0, 2.0) * _Color));
  mc_3.xyz = (mc_3.xyz * (tmpvar_24 + _LightingColor));
  colorBlendLightMap_8 = ((mc_3.xyz * MatcapMask_Color_6.x) + (colorBlendLightMap_8 * (1.0 - MatcapMask_Color_6.x)));
  mediump vec3 tmpvar_37;
  mediump vec3 srcColor_38;
  srcColor_38 = colorBlendLightMap_8;
  tmpvar_37 = (xlv_COLOR1.xyz + (srcColor_38 * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  colorBlendLightMap_8 = tmpvar_37;
  tmpvar_2.w = clamp (xlv_TEXCOORD4.w, 0.0, 1.0);
  highp vec4 tmpvar_39;
  tmpvar_39.xyz = colorBlendLightMap_8;
  tmpvar_39.w = tmpvar_2.w;
  tmpvar_1 = tmpvar_39;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOD_FADE_CROSSFADE" "FOG_LERP" "_DYNAMIC_SCENE_SHADOW_ON" "_LightMap_ON" }
""
}
}
}
 Pass {
  Name "CONSTANT_REPLACE"
  LOD 200
  Tags { "DrawDepth" = "FrontFace" "PerformanceChecks" = "False" "QUEUE" = "Transparent+10" "RenderType" = "Transparent" }
  GpuProgramID 229559
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomIntensity;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomIntensity;
  gl_FragData[0] = color_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
}